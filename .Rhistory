high.eu.option = ifelse(a.eu > b.eu, "a", "b"))
}
switch.point <- sum(y$high.eu.option == "a") + 1
output <- list("df" = y, "switch.point" = switch.point)
return(output)
}
# Calculate switch points for several values of r and bonus
switch.point.df <- expand.grid(r = c(0, .5, .95),
bonus = c(0, .5, 1, 2),
switch.point = NA)
switch.point.df$switch.point <- sapply(1:nrow(switch.point.df), FUN = function(x) {
get.switch.point(r = switch.point.df$r[x],
bonus = switch.point.df$bonus[x])
})
# Plot results
plot(1, xlim = c(0, 5), ylim = c(4, 10), type = "n", xlab = "Competitive Bonus",
ylab = "Switch to Risky Gamble")
for(r.i in unique(switch.point.df$r)) {
with(subset(switch.point.df, r == r.i),
lines(bonus, switch.point, type = "b",
col = yarrr::piratepal("basel")[which(r.i == unique(switch.point.df$r))],
lwd = 2))
}
legend("topright", legend = paste0("r = ", unique(switch.point.df$r)),
col = yarrr::piratepal("basel"), lty = 1, lwd = 2)
get.switch.point()
# Given a value of r and competitive bonus, when will the agent switch to the risky option?
get.switch.point <- function(r = 0,
bonus = 0) {
if(bonus == 0) {
y <- hl.df %>%
mutate(
a.eu = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py ,
b.eu = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py ,
eu.diff = a.eu - b.eu,
bonus.eu = 0,
high.eu.option = ifelse(a.eu > b.eu, "a", "b"))
} else {
y <- hl.df %>%
mutate(
a.eu = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py + (bonus ^ (1 - r)) / (1 - r) * p.a.wins,
b.eu = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py + (bonus ^ (1 - r)) / (1 - r) * (1 - p.a.wins),
eu.diff = a.eu - b.eu,
bonus.eu = (bonus ^ (1 - r)) / (1 - r),
high.eu.option = ifelse(a.eu > b.eu, "a", "b"))
}
switch.point <- sum(y$high.eu.option == "a") + 1
output <- list("df" = y, "switch.point" = switch.point)
return(output)
}
# Calculate switch points for several values of r and bonus
switch.point.df <- expand.grid(r = c(0, .5, .95),
bonus = c(0, .5, 1, 2),
switch.point = NA)
switch.point.df$switch.point <- sapply(1:nrow(switch.point.df), FUN = function(x) {
get.switch.point(r = switch.point.df$r[x],
bonus = switch.point.df$bonus[x])$switch.point
})
# Plot results
plot(1, xlim = c(0, 5), ylim = c(4, 10), type = "n", xlab = "Competitive Bonus",
ylab = "Switch to Risky Gamble")
for(r.i in unique(switch.point.df$r)) {
with(subset(switch.point.df, r == r.i),
lines(bonus, switch.point, type = "b",
col = yarrr::piratepal("basel")[which(r.i == unique(switch.point.df$r))],
lwd = 2))
}
legend("topright", legend = paste0("r = ", unique(switch.point.df$r)),
col = yarrr::piratepal("basel"), lty = 1, lwd = 2)
x <- get.switch.point(r = .5, bonus = 2)
x
x <- get.switch.point(r = .5, bonus = 2)
knitr::kable(x$df[c("index", "eu.diff", "bonus.eu", "high.eu.option")])
x <- get.switch.point(r = .5, bonus = 2)
knitr::kable(x$df[c("index", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2)
r <- .7
ra.hl.df <- hl.df %>% mutate(
a.eu = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py,
b.eu = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py,
eu.diff = a.eu - b.eu,
high.eu.option = ifelse(a.eu > b.eu, "a", "b")
) %>% select(index,  a.eu, b.eu, eu.diff, high.eu.option)
knitr::kable(ra.hl.df, digits = 2, caption = "Option expected utilities and decisions for risk averse subjects with r = .7")
x <- get.switch.point(r = .5, bonus = 1)
knitr::kable(x$df[c("index", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2)
x <- get.switch.point(r = .5, bonus = 0)
knitr::kable(x$df[c("index", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2)
x <- get.switch.point(r = .7, bonus = 0)
knitr::kable(x$df[c("index", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2)
x <- get.switch.point(r = .7, bonus = 1)
knitr::kable(x$df[c("index", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2)
x <- get.switch.point(r = .7, bonus = 1)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2)
x <- get.switch.point(r = .7, bonus = .00001)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2)
x <- get.switch.point(r = .7, bonus = .000000001)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2)
outcomes <- seq(0, 3, .1)
plot(1, xlim = c(0, 3), ylim = c(0, 10), type = "n", main = "Utility functions from Holt and Laury")
grid()
r.vals <- c(0, -.5, .5)
for(x in r.vals) {
lines(outcomes, outcomes ^ (1-x) / (1 - x),
col = yarrr::piratepal("basel", trans = .2)[which(x == r.vals)], lwd= 2)
}
legend("topleft", legend = paste0("r = ", r.vals), col = yarrr::piratepal("basel", trans = .2)[1:length(r.vals)], lwd =2)
outcomes <- seq(0, 3, .1)
plot(1, xlim = c(0, 3), ylim = c(0, 4), type = "n", main = "Utility functions from Holt and Laury")
grid()
r.vals <- c(0, -.5, .5)
for(x in r.vals) {
lines(outcomes, outcomes ^ (1-x) / (1 - x),
col = yarrr::piratepal("basel", trans = .2)[which(x == r.vals)], lwd= 2)
}
legend("topleft", legend = paste0("r = ", r.vals), col = yarrr::piratepal("basel", trans = .2)[1:length(r.vals)], lwd =2)
r <- .7
ra.hl.df <- hl.df %>% mutate(
a.eu = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py,
b.eu = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py,
eu.diff = a.eu - b.eu,
high.eu.option = ifelse(a.eu > b.eu, "a", "b")
) %>% select(index,  a.eu, b.eu, eu.diff, high.eu.option)
knitr::kable(ra.hl.df, digits = 2, caption = "Option expected utilities and decisions for risk averse subjects with r = .7")
x <- get.switch.point(r = .7, bonus = 0)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2)
x <- get.switch.point(r = .7, bonus = .00001)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2)
x <- get.switch.point(r = .7, bonus = 1)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2)
x <- get.switch.point(r = .7, bonus = .5)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2)
x <- get.switch.point(r = .7, bonus = .5)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2)
x <- get.switch.point(r = .7, bonus = .5)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2, caption = "EU calculations with r = 0.7 and reward bonus of 0.5")
x <- get.switch.point(r = -.7, bonus = .5)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2, caption = "EU calculations with r = -0.7 and reward bonus of 0.5")
x <- get.switch.point(r = -.7, bonus = .0)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2, caption = "EU calculations with r = -0.7 and reward bonus of 0.5")
x <- get.switch.point(r = -.7, bonus = 5)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2, caption = "EU calculations with r = -0.7 and reward bonus of 0.5")
x <- get.switch.point(r = .7, bonus = 0)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2, caption = "EU calculations with r = 0.7 and reward bonus of 0")
x <- get.switch.point(r = .7, bonus = .5)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2, caption = "EU calculations with r = 0.7 and reward bonus of 0.5")
x <- get.switch.point(r = -.7, bonus = 0)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2, caption = "EU calculations with r = -0.7 and reward bonus of 0")
x <- get.switch.point(r = -.7, bonus = .5)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2, caption = "EU calculations with r = -0.7 and reward bonus of 0.5")
x <- get.switch.point(r = -.7, bonus = 5)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "eu.diff", "bonus.eu", "high.eu.option")], digits = 2, caption = "EU calculations with r = -0.7 and reward bonus of 5")
sapply(seq(0, 10, .1), FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
sapply(seq(0, 10, 2), FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
rs <- sapply(seq(0, 10, .2), FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(seq(0, 10, .2), FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
rs <- sapply(seq(0, 10, .2), FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(seq(0, 10, .2), FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n"_
rs <- sapply(seq(0, 10, .2), FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(seq(0, 10, .2), FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n")
bonuses <- seq(0, 10, .2)
rs <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n")
lines(bonuses, rs, col = "red")
bonuses <- seq(0, 10, .2)
rs <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n")
lines(bonuses, rs, col = "red", type = "b")
bonuses <- seq(0, 10, .2)
rs <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n")
lines(bonuses, rs, col = "red", lwd = 2)
bonuses <- seq(0, 10, .2)
rs <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n")
lines(bonuses, rs, col = "red", lwd = 2)
lines(bonuses, ra, col = "blue", lwd = 2)
bonuses <- seq(0, 10, .2)
rs <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n", xlab = "Bonus Amount", ylab = "Proportion of risky Choices")
lines(bonuses, rs, col = "red", lwd = 2)
lines(bonuses, ra, col = "blue", lwd = 2)
bonuses <- seq(0, 10, .2)
rs <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n", xlab = "Bonus Amount", ylab = "Proportion of risky Choices")
grid()
abline(h = .5, lty = 2)
lines(bonuses, rs, col = "red", lwd = 2)
lines(bonuses, ra, col = "blue", lwd = 2)
bonuses <- seq(0, 10, .2)
rs <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n", xlab = "Bonus Amount", ylab = "Proportion of risky Choices")
grid()
abline(h = .5, lty = 2)
lines(bonuses, rs, col = "red", lwd = 2)
lines(bonuses, ra, col = "green", lwd = 2)
bonuses <- seq(0, 10, .2)
rs <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n", xlab = "Bonus Amount", ylab = "Proportion of risky Choices")
grid()
abline(h = .5, lty = 2)
lines(bonuses, rs, col = "red", lwd = 2)
lines(bonuses, ra, col = "darkgreen", lwd = 2)
bonuses <- seq(0, 10, .2)
rs <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n", xlab = "Bonus Amount", ylab = "Proportion of risky Choices")
grid()
abline(h = .5, lty = 2)
lines(bonuses, rs, col = "red", lwd = 2)
lines(bonuses, ra, col = "green", lwd = 2)
bonuses <- seq(0, 10, .2)
rs <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n", xlab = "Bonus Amount", ylab = "Proportion of risky Choices")
grid()
abline(h = .5, lty = 2)
lines(bonuses, rs, col = "red", lwd = 2)
lines(bonuses, ra, col = "green", lwd = 2)
legend("topright", c("r = .7, risk averse", "r = -.7, risk seeking"), col = c("green", "red"), lty = 1)
outcomes <- seq(0, 3, .1)
plot(1, xlim = c(0, 3), ylim = c(0, 4), type = "n", main = "Utility functions from Holt and Laury", xlab = "outcome", ylab = "Utility")
grid()
r.vals <- c(0, -.5, .5)
for(x in r.vals) {
lines(outcomes, outcomes ^ (1-x) / (1 - x),
col = yarrr::piratepal("basel", trans = .2)[which(x == r.vals)], lwd= 2)
}
legend("topleft", legend = paste0("r = ", r.vals), col = yarrr::piratepal("basel", trans = .2)[1:length(r.vals)], lwd =2)
get.switch.point <- function(r = 0,
bonus = 0) {
if(bonus == 0) {
y <- hl.df %>%
mutate(
a.eu = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py ,
b.eu = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py ,
eu.diff = a.eu - b.eu,
bonus.eu = 0,
high.eu.option = ifelse(a.eu > b.eu, "a", "b"))
} else {
y <- hl.df %>%
mutate(
a.eu = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py,
b.eu = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py,
a.eu.pb = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py + (bonus ^ (1 - r)) / (1 - r) * p.a.wins,
b.eu.pb = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py + (bonus ^ (1 - r)) / (1 - r) * (1 - p.a.wins),
eu.diff = a.eu - b.eu,
eu.pb.diff = a.eu.pb - b.eu.pb,
high.eu.option = ifelse(a.eu > b.eu, "a", "b"),
high.eu.pb.option = ifelse(a.eu.pb > b.eu.pb, "a", "b"))
}
p.risky <- mean(high.eu.pb.option == "b")
output <- list("df" = y, "p.risky" = p.risky)
return(output)
}
get.switch.point()
# Given a value of r and competitive bonus, when will the agent switch to the risky option?
get.switch.point <- function(r = 0,
bonus = 0) {
if(bonus == 0) {
y <- hl.df %>%
mutate(
a.eu = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py ,
b.eu = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py ,
eu.diff = a.eu - b.eu,
bonus.eu = 0,
high.eu.option = ifelse(a.eu > b.eu, "a", "b"))
} else {
y <- hl.df %>%
mutate(
a.eu = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py,
b.eu = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py,
a.eu.pb = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py + (bonus ^ (1 - r)) / (1 - r) * p.a.wins,
b.eu.pb = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py + (bonus ^ (1 - r)) / (1 - r) * (1 - p.a.wins),
eu.diff = a.eu - b.eu,
eu.pb.diff = a.eu.pb - b.eu.pb,
high.eu.option = ifelse(a.eu > b.eu, "a", "b"),
high.eu.pb.option = ifelse(a.eu.pb > b.eu.pb, "a", "b"))
}
p.risky <- mean(y$high.eu.pb.option == "b")
output <- list("df" = y, "p.risky" = p.risky)
return(output)
}
get.switch.point()
r <- 0
bonus <- 0
# Given a value of r and competitive bonus, when will the agent switch to the risky option?
get.switch.point <- function(r = 0,
bonus = 0) {
if(bonus == 0) {
y <- hl.df %>%
mutate(
a.eu = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py ,
b.eu = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py ,
a.eu.pb = a.eu,
b.eu.pb = b.eu,
eu.diff = a.eu - b.eu,
eu.pb.diff = a.eu.pb - b.eu.pb,
high.eu.option = ifelse(a.eu > b.eu, "a", "b"),
high.eu.pb.option = ifelse(a.eu.pb > b.eu.pb, "a", "b"))
} else {
y <- hl.df %>%
mutate(
a.eu = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py,
b.eu = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py,
a.eu.pb = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py + (bonus ^ (1 - r)) / (1 - r) * p.a.wins,
b.eu.pb = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py + (bonus ^ (1 - r)) / (1 - r) * (1 - p.a.wins),
eu.diff = a.eu - b.eu,
eu.pb.diff = a.eu.pb - b.eu.pb,
high.eu.option = ifelse(a.eu > b.eu, "a", "b"),
high.eu.pb.option = ifelse(a.eu.pb > b.eu.pb, "a", "b"))
}
p.risky <- mean(y$high.eu.pb.option == "b")
output <- list("df" = y, "p.risky" = p.risky)
return(output)
}
get.switch.point()
get.switch.point(r = .7)
get.switch.point(r = .9)
get.switch.point(r = 1.1)
get.switch.point(r = 1.1, bonus = 1)
get.switch.point(r = .7, bonus = 1)
get.switch.point(r = .7, bonus = 0)
get.switch.point(r = .7, bonus = 0)
get.switch.point(r = .7, bonus = 1)
get.switch.point(r = -.7, bonus = 0)
get.switch.point(r = -.7, bonus = 1)
get.switch.point(r = -.7, bonus = 5)
knitr::kable(x$df[c("index", "a.eu.pb", "b.eu.pb", "eu.pb.diff", "high.eu.option", "high.eu.pb.option")], digits = 2, caption = "EU calculations with r = 0.7 and reward bonus of 0")
# Given a value of r and competitive bonus, when will the agent switch to the risky option?
get.switch.point <- function(r = 0,
bonus = 0) {
if(bonus == 0) {
y <- hl.df %>%
mutate(
a.eu = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py ,
b.eu = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py ,
a.eu.pb = a.eu,
b.eu.pb = b.eu,
eu.diff = a.eu - b.eu,
eu.pb.diff = a.eu.pb - b.eu.pb,
high.eu.option = ifelse(a.eu > b.eu, "a", "b"),
high.eu.pb.option = ifelse(a.eu.pb > b.eu.pb, "a", "b"))
} else {
y <- hl.df %>%
mutate(
a.eu = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py,
b.eu = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py,
a.eu.pb = (a.x ^ (1 - r)) / (1 - r) * a.px + (a.y ^ (1 - r)) / (1 - r) * a.py + (bonus ^ (1 - r)) / (1 - r) * p.a.wins,
b.eu.pb = (b.x ^ (1 - r)) / (1 - r) * b.px + (b.y ^ (1 - r)) / (1 - r) * b.py + (bonus ^ (1 - r)) / (1 - r) * (1 - p.a.wins),
eu.diff = a.eu - b.eu,
eu.pb.diff = a.eu.pb - b.eu.pb,
high.eu.option = ifelse(a.eu > b.eu, "a", "b"),
high.eu.pb.option = ifelse(a.eu.pb > b.eu.pb, "a", "b"))
}
p.risky <- mean(y$high.eu.pb.option == "b")
output <- list("df" = y, "p.risky" = p.risky)
return(output)
}
x <- get.switch.point(r = .7, bonus = 0)
knitr::kable(x$df[c("index", "a.eu.pb", "b.eu.pb", "eu.pb.diff", "high.eu.option", "high.eu.pb.option")], digits = 2, caption = "EU calculations with r = 0.7 and reward bonus of 0")
knitr::kable(x$df[c("index", "a.eu", "b.eu", "a.eu.pb", "b.eu.pb", "eu.pb.diff", "high.eu.option", "high.eu.pb.option")], digits = 2, caption = "EU calculations with r = 0.7 and reward bonus of 0")
x <- get.switch.point(r = .7, bonus = 0)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "a.eu.pb", "b.eu.pb", "eu.pb.diff", "high.eu.option", "high.eu.pb.option")], digits = 2, caption = "EU calculations with r = 0.7 and reward bonus of 0.5")
x <- get.switch.point(r = .7, bonus = .5)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "a.eu.pb", "b.eu.pb", "eu.pb.diff", "high.eu.option", "high.eu.pb.option")], digits = 2, caption = "EU calculations with r = 0.7 and reward bonus of 0.5")
x <- get.switch.point(r = -.7, bonus = 0)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "a.eu.pb", "b.eu.pb", "eu.pb.diff", "high.eu.option", "high.eu.pb.option")], digits = 2, caption = "EU calculations with r = -0.7 and reward bonus of 0")
x <- get.switch.point(r = -.7, bonus = .5)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "a.eu.pb", "b.eu.pb", "eu.pb.diff", "high.eu.option", "high.eu.pb.option")], digits = 2, caption = "EU calculations with r = -0.7 and reward bonus of .5")
x <- get.switch.point(r = -.7, bonus = 5)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "a.eu.pb", "b.eu.pb", "eu.pb.diff", "high.eu.option", "high.eu.pb.option")], digits = 2, caption = "EU calculations with r = -0.7 and reward bonus of 5")
bonuses <- seq(0, 10, .2)
rs <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.option == "b"))
})
ra <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.pb.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n", xlab = "Bonus Amount", ylab = "Proportion of risky Choices")
grid()
abline(h = .5, lty = 2)
lines(bonuses, rs, col = "red", lwd = 2)
lines(bonuses, ra, col = "green", lwd = 2)
legend("topright", c("r = .7, risk averse", "r = -.7, risk seeking"), col = c("green", "red"), lty = 1)
bonuses <- seq(0, 10, .2)
rs <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = -.7, bonus = x)
return(mean(y$df$high.eu.pb.option == "b"))
})
ra <- sapply(bonuses, FUN = function(x) {
y <- get.switch.point(r = .7, bonus = x)
return(mean(y$df$high.eu.pb.option == "b"))
})
plot(1, xlim = c(0, 10), ylim = c(0, 1), type = "n", xlab = "Bonus Amount", ylab = "Proportion of risky Choices")
grid()
abline(h = .5, lty = 2)
lines(bonuses, rs, col = "red", lwd = 2)
lines(bonuses, ra, col = "green", lwd = 2)
legend("topright", c("r = .7, risk averse", "r = -.7, risk seeking"), col = c("green", "red"), lty = 1)
x <- get.switch.point(r = .7, bonus = 1)
knitr::kable(x$df[c("index", "a.eu", "b.eu", "a.eu.pb", "b.eu.pb", "eu.pb.diff", "high.eu.option", "high.eu.pb.option")], digits = 2, caption = "EU calculations with r = 0.7 and reward bonus of 1")
x <- 2
r <- .7
x ^ (1-r) / (1 - r)
r <- .95
x ^ (1-r) / (1 - r)
library(yarrr)
pirateplot(weight ~ Diet, data = ChickWeight, inf.disp = "line")
pirateplot(weight ~ Diet, data = ChickWeight, inf.disp = "line", inf.f.col = "black")
pirateplot(weight ~ Diet, data = ChickWeight, inf.disp = "line", inf.f.col = "black", mix.p =.1)
pirateplot(weight ~ Diet, data = ChickWeight, inf.disp = "line", inf.f.col = "black", mix.p =.3)
pirateplot(weight ~ Diet, data = ChickWeight, inf.disp = "line", inf.f.col = "black", mix.p =.3, mix.col = "gray")
pirateplot(weight ~ Time, data = ChickWeight, inf.disp = "line", inf.f.col = "black", mix.p =.3, mix.col = "gray")
pirateplot(weight ~ Time, data = ChickWeight, inf.disp = "line", inf.f.col = "black", mix.p =.3, mix.col = "gray", theme = 2)
pirateplot(weight ~ Time, data = ChickWeight, inf.disp = "line", inf.f.col = "black", mix.p =.3, mix.col = "gray", theme = 3)
pirateplot(weight ~ Time, data = ChickWeight, inf.disp = "line", inf.f.col = "black", mix.p =.3, mix.col = "gray", theme = 4)
